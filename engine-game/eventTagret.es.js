export class EventTargetThien {  constructor() {    this._listeners = new Map();  }  on(type, callback) {    if (!this._listeners.has(type)) {      this._listeners.set(type, []);    }    this._listeners.get(type).push(callback);  }  off(type, callback) {    if (!this._listeners.has(type)) return;    if (callback) {      const listeners = this._listeners.get(type);      const index = listeners.indexOf(callback);      if (index !== -1) {        listeners.splice(index, 1);      }    } else {      this._listeners.delete(type);    }  }  emit(type, ...args) {    if (!this._listeners.has(type)) return;    const listeners = this._listeners.get(type).slice();    for (const listener of listeners) {      listener(...args);    }  }  once(type, callback) {    const onceWrapper = (...args) => {      callback(...args);      this.off(type, onceWrapper);    };    this.on(type, onceWrapper);  }}